trigger:
- main
- dev

pool:
  vmImage: ubuntu-latest

stages:
- stage: Initialize
  displayName: 'Initialize Variables'
  jobs:
  - job: SelectVariables
    displayName: 'Select Variable Group'
    steps:
    - checkout: none
    - powershell: |
        if ("$(Build.SourceBranchName)" -eq "main") {
            Write-Host "##vso[task.setvariable variable=VariableGroupName]MainPipelineVars"
        } else {
            Write-Host "##vso[task.setvariable variable=VariableGroupName]DevPipelineVars"
        }
      displayName: 'Determine Variable Group'

- stage: PipelineContainerUpdate
  displayName: Updating Container
  dependsOn: Initialize
  variables:
    - group: $(VariableGroupName)
  jobs:
  - job: UpdateContainer
    displayName: Updating
    steps:
    - script: |
        echo "Updating Container"
        sudo apt update
      displayName: Updating Container

  - job: UpgradingContainer
    displayName: Upgrading
    dependsOn: UpdateContainer
    steps:
    - script: |
        echo "Upgrading Container"
        sudo apt update
      displayName: Upgrading Container

- stage: SonarScan
  displayName: Sonar Scan
  dependsOn: PipelineContainerUpdate
  variables:
    - group: $(VariableGroupName)
  jobs:
  - job: SonarScan
    displayName: Sonar Scan
    steps:
    - script: |
        echo "Installing Sonar Scanner"
        sudo apt install openjdk-11-jre -y
        curl -sS https://binaries.sonarsource.com/Distribution/sonar-scanner-cli/sonar-scanner-cli-4.8.0.2856-linux.zip -o sonar-scanner.zip
        unzip sonar-scanner.zip
        sudo mv sonar-scanner-*/ /opt/sonar-scanner
        echo "export SONAR_SCANNER_HOME=/opt/sonar-scanner" | sudo tee -a /etc/profile.d/sonar-scanner.sh
        echo "export PATH=\$PATH:\$SONAR_SCANNER_HOME/bin" | sudo tee -a /etc/profile.d/sonar-scanner.sh
        source /etc/profile.d/sonar-scanner.sh
        echo "Sonar Scanner installed successfully"
      displayName: Installing Sonar Scanner

    - script: |
        echo "Running Sonar Scanner"
        source /etc/profile.d/sonar-scanner.sh
        sonar-scanner \
          -Dsonar.projectKey=Sansitor_node-hello_AZXmO5jR16Bxdig4f5oU \
          -Dsonar.sources=. \
          -Dsonar.host.url=http://128.24.102.209:9000/ \
          -Dsonar.login=sqp_00bfc5edbc114030be07515080b2bba0ccde3655
      displayName: Running Sonar Scanner

- stage: BuildAndPushImage
  displayName: 'Build and Push Docker Image'
  dependsOn: SonarScan
  variables:
    - group: $(VariableGroupName)
  jobs:
  - job: BuildDockerImage
    displayName: 'Build , Scan & Push Docker Image'
    steps:
    - script: |
        echo "Logging in to Docker Hub..."
        echo $(DOCKER_PASSWORD) | docker login -u $(DOCKER_USERNAME) --password-stdin
      displayName: 'Logging into Container Registries'

    - script: |  
        docker build . -t "$(DOCKER_USERNAME)/$(IMAGE_NAME):$(IMAGE_TAG)"
      displayName: 'Building Docker Image'

    - script: | 
        curl -fsSL https://raw.githubusercontent.com/docker/scout-cli/main/install.sh -o install-scout.sh
        sh install-scout.sh
        docker scout cves \
          --format only-packages \
          --only-vuln-packages \
          --output $(Build.ArtifactStagingDirectory)/docker_scout_report.json \
          "$(DOCKER_USERNAME)/$(IMAGE_NAME):$(IMAGE_TAG)"
      displayName: 'Installing Docker Scout & Scanning Image'

    - script: |
        docker push "$(DOCKER_USERNAME)/$(IMAGE_NAME):$(IMAGE_TAG)"
      displayName: 'Pushing the image to Docker Hub'

    - publish: $(Build.ArtifactStagingDirectory)/docker_scout_report.json
      artifact: docker_scout_report    
      displayName: 'Publish Docker Scout Report'

    - script: |
        docker save -o $(Build.ArtifactStagingDirectory)/sanchit.tar "$(DOCKER_USERNAME)/$(IMAGE_NAME):$(IMAGE_TAG)"
      displayName: 'Saving Docker Image as sanchit.tar'

    - publish: $(Build.ArtifactStagingDirectory)/sanchit.tar
      artifact: docker_image_tar
      displayName: 'Publish Docker Image Tar File'

- stage: CopyToVM
  displayName: 'Copy Docker Image to VM'
  dependsOn: BuildAndPushImage
  variables:
    - group: $(VariableGroupName)
  jobs:
  - job: CopyToVM
    displayName: 'Copying Image Tar file to VM'
    steps:
    - download: current
      artifact: docker_image_tar
      displayName: 'Download Docker Image Tar'

    - script: |
        docker load -i $(Pipeline.Workspace)/docker_image_tar/sanchit.tar
        sudo apt -y install sshpass
        mkdir -p ~/.ssh
        ssh-keyscan 128.24.102.209 >> ~/.ssh/known_hosts
        sshpass -p "ranjeet@123qwe" scp $(Pipeline.Workspace)/docker_image_tar/sanchit.tar ranjeet@128.24.102.209:/home/ranjeet/
      displayName: 'Copy Docker Image Tar to Azure VM using Username & Password'
