trigger:
- main

pool:
  vmImage: ubuntu-latest

variables:
  DOCKER_USERNAME: $(DockerUsername)
  DOCKER_PASSWORD: $(DockerPassword)
  IMAGE_NAME: "sanchit"
  IMAGE_TAG: "latest"
  SONAR_HOST_URL: "http://172.172.107.149:9000/"
  SONAR_PROJECT_KEY: "Sansitor_node-hello_AZX1oNOx4D1I2PVSzYCV"
  SONAR_LOGIN_TOKEN: $sqa_f71f655f648d5b73b4dda58588b81dae9e9edb69
  VM_IP: "172.172.107.149"
  VM_USERNAME: "ranjeet"
  VM_PASSWORD: "ranjeet@123qwe"

stages:
- stage: PipelineContainerUpdate
  displayName: Updating Container
  jobs:
  - job: UpdateContainer
    displayName: Updating
    steps:
    - script: |
        echo "Updating Container"
        sudo apt update
      displayName: Updating Container

  - job: UpgradingContainer
    displayName: Upgrading
    dependsOn: UpdateContainer
    steps:
    - script: |
        echo "Upgrading Container"
        sudo apt update
      displayName: Upgrading Container
      
- stage: SonarScan
  displayName: Sonar Scan
  dependsOn: PipelineContainerUpdate
  jobs:
  - job: SonarScan
    displayName: Sonar Scan
    steps:
    - script: |
        echo "Installing Sonar Scanner"
        sudo apt install openjdk-11-jre -y
        curl -sS https://binaries.sonarsource.com/Distribution/sonar-scanner-cli/sonar-scanner-cli-4.8.0.2856-linux.zip -o sonar-scanner.zip
        unzip sonar-scanner.zip
        sudo mv sonar-scanner-*/ /opt/sonar-scanner
        ls -la /opt/sonar-scanner
        echo "export SONAR_SCANNER_HOME=/opt/sonar-scanner" | sudo tee -a /etc/profile.d/sonar-scanner.sh
        echo "export PATH=\$PATH:\$SONAR_SCANNER_HOME/bin" | sudo tee -a /etc/profile.d/sonar-scanner.sh
        source /etc/profile.d/sonar-scanner.sh
        echo "Sonar Scanner installed successfully"
      displayName: Installing Sonar Scanner

    - script : |
        echo "Running Sonar Scanner"
        sonar-scanner \
          -Dsonar.projectKey=$(SONAR_PROJECT_KEY) \
          -Dsonar.sources=. \
          -Dsonar.host.url=$(SONAR_HOST_URL) \
          -Dsonar.login=$(SONAR_LOGIN_TOKEN)
      displayName: Running Sonar Scanner

- stage: BuildAndPushImage
  displayName: 'Build and Push Docker Image'
  dependsOn: SonarScan
  condition: succeeded()
  jobs:
    - job: BuildDockerImage
      displayName: 'Build , Scan & Push Docker Image'
      steps:
        - script: |
            echo "Logging in to Docker Hub..."
            echo $(DOCKER_PASSWORD) | docker login -u $(DOCKER_USERNAME) --password-stdin
          displayName: 'Logging into Container Registries'

        - script: |  
            docker build . -t "$(DOCKER_USERNAME)/$(IMAGE_NAME):$(IMAGE_TAG)"
          displayName: 'Building Docker Image'

        - script: | 
           curl -fsSL https://raw.githubusercontent.com/docker/scout-cli/main/install.sh -o install-scout.sh
            sh install-scout.sh
            docker scout cves \
              --format only-packages \
              --only-vuln-packages \
              --output $(Build.ArtifactStagingDirectory)/docker_scout_report.json \
              "$(DOCKER_USERNAME)/$(IMAGE_NAME):$(IMAGE_TAG)"
          displayName: 'Installing Docker Scout & Scanning Image'
            
        - script: |
            docker push "$(DOCKER_USERNAME)/$(IMAGE_NAME):$(IMAGE_TAG)"
          displayName: 'Pushing the image to Docker Hub'

        - publish: $(Build.ArtifactStagingDirectory)/docker_scout_report.json
          artifact: docker_scout_report    
          displayName: 'Publish Docker Scout Report'
        
        - script: |
            docker save -o $(Build.ArtifactStagingDirectory)/sanchit.tar "$(DOCKER_USERNAME)/$(IMAGE_NAME):$(IMAGE_TAG)"
          displayName: 'Saving Docker Image as sanchit.tar'

        - publish: $(Build.ArtifactStagingDirectory)/sanchit.tar
          artifact: docker_image_tar
          displayName: 'Publish Docker Image Tar File'
        
- stage: CopyToVM
  displayName: 'Copy Docker Image to VM'
  jobs:
    - job: CopyToVM
      displayName: 'Copying Image Tar file to VM'
      steps:
      - download: current
        artifact: docker_image_tar
        displayName: 'Download Docker Image Tar'
        
      - script: |
         docker load -i $(Pipeline.Workspace)/docker_image_tar/sanchit.tar
         sudo apt -y install sshpass
         mkdir -p ~/.ssh
         ssh-keyscan $(VM_IP) >> ~/.ssh/known_hosts
         sshpass -p "$(VM_PASSWORD)" scp $(Pipeline.Workspace)/docker_image_tar/sanchit.tar $(VM_USERNAME)@$(VM_IP):/home/$(VM_USERNAME)/
        displayName: 'Copy Docker Image Tar to Azure VM using Username & Password'