trigger:
- main

pool:
  vmImage: ubuntu-latest

variables:
  DOCKER_USERNAME: $(DockerUsername)
  DOCKER_PASSWORD: $(DockerPassword)
  IMAGE_NAME: "sanchit"
  IMAGE_TAG: "latest"
  SONAR_ORGANIZATION: "sansitor"
  SONAR_PROJECT_KEY: "Sansitor_node-hello"
  SONAR_TOKEN: $(SonarCloudToken)
  VM_IP: "172.172.107.149"
  VM_USERNAME: "ranjeet"
  VM_PASSWORD: "ranjeet@123qwe"

stages:
- stage: PipelineContainerUpdate
  displayName: Updating Container
  jobs:
  - job: UpdateContainer
    displayName: Updating
    steps:
    - script: |
        echo "Updating Container"
        sudo apt update
      displayName: Updating Container
  - job: UpgradingContainer
    displayName: Upgrading
    dependsOn: UpdateContainer
    steps:
    - script: |
        echo "Upgrading Container"
        sudo apt update
      displayName: Upgrading Container
      
- stage: SonarScan
  displayName: SonarCloud Scan
  dependsOn: PipelineContainerUpdate
  jobs:
  - job: SonarScan
    displayName: SonarCloud Scan
    steps:
    - task: SonarCloudPrepare@1
      displayName: 'Prepare SonarCloud Analysis'
      inputs:
        SonarCloud: 'SonarCloudConnection'
        organization: '$(SONAR_ORGANIZATION)'
        scannerMode: 'CLI'
        configMode: 'manual'
        cliProjectKey: '$(SONAR_PROJECT_KEY)'
        cliSources: '.'
    
    - task: SonarCloudAnalyze@1
      displayName: 'Run SonarCloud Analysis'
    
    - task: SonarCloudPublish@1
      displayName: 'Publish SonarCloud Results'
      inputs:
        pollingTimeoutSec: '300'

- stage: CheckSonarStatus
  displayName: Check SonarCloud Quality Gate
  dependsOn: SonarScan
  jobs:
  - job: WaitForQualityGate
    displayName: 'Wait for SonarCloud Quality Gate'
    steps:
    - task: SonarCloudPublish@1
      displayName: 'Check SonarCloud Quality Gate'
      inputs:
        pollingTimeoutSec: '300'

    - script: |
        echo "Checking Quality Gate status..."
        GATE_STATUS=$(curl -s -u $(SONAR_TOKEN): \
          https://sonarcloud.io/api/qualitygates/project_status?projectKey=$(SONAR_PROJECT_KEY) | \
          jq -r '.projectStatus.status')
        
        echo "Quality Gate Status: $GATE_STATUS"
        
        if [ "$GATE_STATUS" != "OK" ]; then
          echo "Quality Gate failed! Terminating pipeline."
          exit 1
        else
          echo "Quality Gate passed! Continuing pipeline."
        fi
      displayName: 'Validate Quality Gate'

- stage: BuildAndPushImage
  displayName: 'Build and Push Docker Image'
  dependsOn: CheckSonarStatus
  jobs:
    - job: BuildDockerImage
      displayName: 'Build, Scan & Push Docker Image'
      steps:
        - script: |
            echo "Logging in to Docker Hub..."
            echo $(DOCKER_PASSWORD) | docker login -u $(DOCKER_USERNAME) --password-stdin
          displayName: 'Logging into Container Registries'

        - script: |  
            echo "Building image: $(DOCKER_USERNAME)/$(IMAGE_NAME):$(IMAGE_TAG)"
            docker build . -t "$(DOCKER_USERNAME)/$(IMAGE_NAME):$(IMAGE_TAG)"
          displayName: 'Building Docker Image'

        - script: | 
            curl -fsSL https://raw.githubusercontent.com/docker/scout-cli/main/install.sh -o install-scout.sh
            sh install-scout.sh
            docker scout cves \
              --format only-packages \
              --only-vuln-packages \
              --output $(Build.ArtifactStagingDirectory)/docker_scout_report.json \
              "$(DOCKER_USERNAME)/$(IMAGE_NAME):$(IMAGE_TAG)"
          displayName: 'Installing Docker Scout & Scanning Image'
            
        - script: |
            docker push "$(DOCKER_USERNAME)/$(IMAGE_NAME):$(IMAGE_TAG)"
          displayName: 'Pushing the image to Docker Hub'

        - publish: $(Build.ArtifactStagingDirectory)/docker_scout_report.json
          artifact: docker_scout_report    
          displayName: 'Publish Docker Scout Report'
        
        - script: |
            docker save -o $(Build.ArtifactStagingDirectory)/sanchit.tar "$(DOCKER_USERNAME)/$(IMAGE_NAME):$(IMAGE_TAG)"
          displayName: 'Saving Docker Image as sanchit.tar'

        - publish: $(Build.ArtifactStagingDirectory)/sanchit.tar
          artifact: docker_image_tar
          displayName: 'Publish Docker Image Tar File'
        
- stage: CopyToVM
  displayName: 'Copy to VM'
  dependsOn: BuildAndPushImage
  jobs:
    - job: CopyToVM
      displayName: 'Copying Image Tar file to VM.'
      steps:
      - download: current
        artifact: docker_image_tar
        displayName: 'Download Docker Image Tar'
      - script: |
         docker load -i $(Pipeline.Workspace)/docker_image_tar/sanchit.tar
         sudo apt -y install sshpass
         mkdir -p ~/.ssh
         ssh-keyscan $(VM_IP) >> ~/.ssh/known_hosts
         sshpass -p $(VM_PASSWORD) scp $(Pipeline.Workspace)/docker_image_tar/sanchit.tar $(VM_USERNAME)@$(VM_IP):/home/ranjeet/
         sshpass -p $(VM_PASSWORD) scp $(Build.SourcesDirectory)/container_start.sh $(VM_USERNAME)@$(VM_IP):/home/ranjeet/
         sshpass -p $(VM_PASSWORD) ssh $(VM_USERNAME)@$(VM_IP) 'bash /home/ranjeet/container_start.sh'
        displayName: 'Copy Docker Image Tar to Azure VM using Username & Password'