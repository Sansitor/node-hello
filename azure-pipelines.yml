trigger:
- main

pool:
  vmImage: ubuntu-latest

variables:
  DOCKER_USERNAME: $(DockerUsername)
  DOCKER_PASSWORD: $(DockerPassword)
  IMAGE_NAME: "sanchit"
  IMAGE_TAG: "latest"
  SONAR_HOST_URL: "https://sonarcloud.io"
  SONAR_PROJECT_KEY: "Sansitor_node-hello"
  SONAR_ORGANIZATION: "sansitor"
  SONAR_TOKEN: "b82435da279c822822d17553d2a6432a9b655b6c"
  VM_IP: "20.57.119.143"
  VM_USERNAME: "sanchit"
  VM_PASSWORD: "sanchit@123qwe"

stages:
- stage: PipelineContainerUpdate
  displayName: Updating Container
  jobs:
  - job: UpdateContainer
    displayName: Updating
    steps:
    - script: |
        echo "Updating Container"
        sudo apt update
      displayName: Updating Container
  - job: UpgradingContainer
    displayName: Upgrading
    dependsOn: UpdateContainer
    steps:
    - script: |
        echo "Upgrading Container"
        sudo apt update
      displayName: Upgrading Container
      
- stage: SonarScan
  displayName: SonarCloud Scan
  dependsOn: PipelineContainerUpdate
  jobs:
    - job: SonarScan
      displayName: SonarCloud Scan
      steps:
        - script: |
            echo "Installing JDK 17"
            sudo apt update
            sudo apt install openjdk-17-jre -y
            java -version

            echo "Installing Sonar Scanner"
            curl -sS https://binaries.sonarsource.com/Distribution/sonar-scanner-cli/sonar-scanner-cli-4.8.0.2856-linux.zip -o sonar-scanner.zip
            unzip sonar-scanner.zip
            sudo mv sonar-scanner-*/ /opt/sonar-scanner
            echo "export SONAR_SCANNER_HOME=/opt/sonar-scanner" | sudo tee -a /etc/profile.d/sonar-scanner.sh
            echo "export PATH=\$PATH:\$SONAR_SCANNER_HOME/bin" | sudo tee -a /etc/profile.d/sonar-scanner.sh
            source /etc/profile.d/sonar-scanner.sh
            sonar-scanner -v
          displayName: Installing JDK 17 and Sonar Scanner


        - script : |
            echo "Running SonarCloud Scanner"
            source /etc/profile.d/sonar-scanner.sh
            /opt/sonar-scanner/bin/sonar-scanner \
              -Dsonar.projectKey=$(SONAR_PROJECT_KEY) \
              -Dsonar.organization=$(SONAR_ORGANIZATION) \
              -Dsonar.sources=. \
              -Dsonar.host.url=$(SONAR_HOST_URL) \
              -Dsonar.login=$(SONAR_TOKEN)
          displayName: Running SonarCloud Scanner


- stage: CheckSonarStatus
  displayName: Check Sonar Project Status
  dependsOn: SonarScan
  jobs:
  - job: CheckProjectStatus
    displayName: Checking Project Status
    steps:
    - script: |
        echo "Installing jq"
        sudo apt-get update && sudo apt-get install jq -y
      displayName: Install jq

    - script: |
        echo "Checking Sonar Project Status..."

        # Fetch the project status
        RESPONSE=$(curl -u $(SONAR_LOGIN_TOKEN): $(SONAR_API_URL))

        # Print the raw response to debug
        echo "Raw API Response: $RESPONSE"
        
        # Extract the status correctly using jq
        STATUS=$(echo $RESPONSE | jq -r '.projectStatus.status')
        echo "Extracted Status: $STATUS"

        if [ "$STATUS" != "OK" ]; then
          echo "Sonar Project status is not OK. Terminating the pipeline."
          exit 1
        else
          echo "Sonar Project status is OK. Continuing pipeline."
        fi
      displayName: Checking Project Status


- stage: BuildAndPushImage
  displayName: 'Build and Push Docker Image'
  jobs:
    - job: BuildDockerImage
      displayName: 'Build , Scan & Push Docker Image'
      steps:
        - script: |
            echo "Logging in to Docker Hub..."
            echo $(DOCKER_PASSWORD) | docker login -u $(DOCKER_USERNAME) --password-stdin
          displayName: 'Logging into Container Registries'

        - script: |  
            echo "Building image: $(DOCKER_USERNAME)/$(IMAGE_NAME):$(IMAGE_TAG)"
            docker build . -t "$(DOCKER_USERNAME)/$(IMAGE_NAME):$(IMAGE_TAG)"
          displayName: 'Building Docker Image'

        - script: | 
           curl -fsSL https://raw.githubusercontent.com/docker/scout-cli/main/install.sh -o install-scout.sh
            sh install-scout.sh
            docker scout cves \
              --format only-packages \
              --only-vuln-packages \
              --output $(Build.ArtifactStagingDirectory)/docker_scout_report.json \
              "$(DOCKER_USERNAME)/$(IMAGE_NAME):$(IMAGE_TAG)"
          displayName: 'Installing Docker Scout & Scanning Image'
            
        - script: |
            docker push "$(DOCKER_USERNAME)/$(IMAGE_NAME):$(IMAGE_TAG)"
          displayName: 'Pushing the image to Docker Hub'

        - publish: $(Build.ArtifactStagingDirectory)/docker_scout_report.json
          artifact: docker_scout_report    
          displayName: 'Publish Docker Scout Report'
        
        - script: |
            docker save -o $(Build.ArtifactStagingDirectory)/sanchit.tar "$(DOCKER_USERNAME)/$(IMAGE_NAME):$(IMAGE_TAG)"
          displayName: 'Saving Docker Image as sanchit.tar'

        - publish: $(Build.ArtifactStagingDirectory)/sanchit.tar
          artifact: docker_image_tar
          displayName: 'Publish Docker Image Tar File'
        
- stage: CopyToVM
  displayName: 'Copy to VM'
  jobs:
    - job: CopyToVM
      displayName: 'Copying Image Tar file to VM.'
      steps:
      - download: current
        artifact: docker_image_tar
        displayName: 'Download Docker Image Tar'
      - script: |
         docker load -i $(Pipeline.Workspace)/docker_image_tar/sanchit.tar
         sudo apt -y install sshpass
         mkdir -p ~/.ssh
         ssh-keyscan $(VM_IP) >> ~/.ssh/known_hosts
         sshpass -p $(VM_PASSWORD) scp $(Pipeline.Workspace)/docker_image_tar/sanchit.tar $(VM_USERNAME)@$(VM_IP):/home/ranjeet/
         sshpass -p $(VM_PASSWORD) scp $(Build.SourcesDirectory)/container_start.sh $(VM_USERNAME)@$(VM_IP):/home/ranjeet/
         sshpass -p $(VM_PASSWORD) ssh $(VM_USERNAME)@$(VM_IP) 'bash /home/ranjeet/container_start.sh'
        displayName: 'Copy Docker Image Tar to Azure VM using Username & Password'