trigger:
- main

pool:
  vmImage: ubuntu-latest

variables:
  DOCKER_USERNAME: $(DockerUsername)
  DOCKER_PASSWORD: $(DockerPassword)
  IMAGE_NAME: "sanchit"
  IMAGE_TAG: "latest"
  SONAR_HOST_URL: "http://172.172.107.149:9000/"
  SONAR_PROJECT_KEY: "Sansitor_node-hello_AZX1oNOx4D1I2PVSzYCV"
  SONAR_LOGIN_TOKEN: sqa_355d2cc7c5a08b4edf74ff2f377f613a9dc0ea45
  VM_IP: "172.172.107.149"
  VM_USERNAME: "ranjeet"
  VM_PASSWORD: "ranjeet@123qwe"

stages:
- stage: PipelineContainerUpdate
  displayName: Updating Container
  jobs:
  - job: UpdateContainer
    displayName: Updating
    steps:
    - script: |
        echo "Updating Container"
        sudo apt update
      displayName: Updating Container
  - job: UpgradingContainer
    displayName: Upgrading
    dependsOn: UpdateContainer
    steps:
    - script: |
        echo "Upgrading Container"
        sudo apt update
      displayName: Upgrading Container
      
- stage: SonarScan
  displayName: Sonar Scan
  dependsOn: PipelineContainerUpdate
  jobs:
  - job: SonarScan
    displayName: Sonar Scan
    steps:
    - script: |
        echo "Installing Sonar Scanner"
        sudo apt install openjdk-11-jre -y
        curl -sS https://binaries.sonarsource.com/Distribution/sonar-scanner-cli/sonar-scanner-cli-4.8.0.2856-linux.zip -o sonar-scanner.zip
        unzip sonar-scanner.zip
        sudo mv sonar-scanner-*/ /opt/sonar-scanner
        ls -la /opt/sonar-scanner
        echo "export SONAR_SCANNER_HOME=/opt/sonar-scanner" | sudo tee -a /etc/profile.d/sonar-scanner.sh
        echo "export PATH=\$PATH:\$SONAR_SCANNER_HOME/bin" | sudo tee -a /etc/profile.d/sonar-scanner.sh
        source /etc/profile.d/sonar-scanner.sh
        echo "Sonar Scanner installed successfully"
      displayName: Installing Sonar Scanner
    - script : |
        echo "Running Sonar Scanner"
        ls -la /opt/sonar-scanner
        cat /etc/profile.d/sonar-scanner.sh
        echo "export SONAR_SCANNER_HOME=/opt/sonar-scanner" | sudo tee -a /etc/profile.d/sonar-scanner.sh
        echo "export PATH=\$PATH:\$SONAR_SCANNER_HOME/bin" | sudo tee -a /etc/profile.d/sonar-scanner.sh
        source /etc/profile.d/sonar-scanner.sh
        sonar-scanner \
          -Dsonar.projectKey=$(SONAR_PROJECT_KEY) \
          -Dsonar.sources=. \
          -Dsonar.host.url=$(SONAR_HOST_URL) \
          -Dsonar.login=$(SONAR_LOGIN_TOKEN)
      displayName: Running Sonar Scanner
      
- stage: SonarQualityGate
  displayName: 'Check Sonar Quality Gate'
  dependsOn: SonarScan
  jobs:
  - job: QualityGateCheck
    displayName: 'Verify Quality Gate'
    steps:
    - script: |
        echo "Checking SonarQube Quality Gate"
        sudo apt-get install jq -y curl -y
        
        # Wait for analysis to complete (SonarQube needs time to process)
        echo "Waiting for SonarQube to process the analysis..."
        sleep 30
        
        # Debug curl request
        echo "Testing API connection..."
        CURL_TEST=$(curl -s -u "$(SONAR_LOGIN_TOKEN):" "$(SONAR_HOST_URL)/api/system/status")
        echo "API Status Response: $CURL_TEST"
        
        # Get the most recent task
        TASK_JSON=$(curl -s -u "$(SONAR_LOGIN_TOKEN):" "$(SONAR_HOST_URL)/api/ce/component?component=$(SONAR_PROJECT_KEY)")
        echo "Task Response: $TASK_JSON"
        
        # Check if we got valid JSON
        if ! echo "$TASK_JSON" | jq . > /dev/null 2>&1; then
          echo "Error: Invalid JSON response from SonarQube API. Check credentials and URL."
          echo "Raw response:"
          echo "$TASK_JSON"
          exit 1
        fi
        
        # Get the latest analysis task ID
        TASK_ID=$(echo "$TASK_JSON" | jq -r '.queue[0].id // .current.id // empty')
        if [ -z "$TASK_ID" ]; then
          echo "No analysis tasks found for project. Check project key."
          exit 1
        fi
        
        echo "Found analysis task: $TASK_ID"
        
        # Wait for analysis to complete
        STATUS="PENDING"
        MAX_ATTEMPTS=30
        ATTEMPT=0
        
        while [ "$STATUS" == "PENDING" ] || [ "$STATUS" == "IN_PROGRESS" ]; do
          ATTEMPT=$((ATTEMPT+1))
          if [ $ATTEMPT -gt $MAX_ATTEMPTS ]; then
            echo "Timed out waiting for analysis to complete."
            exit 1
          fi
          
          echo "Checking task status (attempt $ATTEMPT/$MAX_ATTEMPTS)..."
          sleep 5
          
          TASK_STATUS=$(curl -s -u "$(SONAR_LOGIN_TOKEN):" "$(SONAR_HOST_URL)/api/ce/task?id=$TASK_ID")
          if ! echo "$TASK_STATUS" | jq . > /dev/null 2>&1; then
            echo "Error: Invalid JSON response from task status API."
            continue
          fi
          
          STATUS=$(echo "$TASK_STATUS" | jq -r '.task.status')
          echo "Task status: $STATUS"
        done
        
        if [ "$STATUS" == "FAILED" ]; then
          echo "Analysis task failed."
          exit 1
        fi
        
        # Get quality gate status
        ANALYSIS_ID=$(echo "$TASK_STATUS" | jq -r '.task.analysisId')
        if [ -z "$ANALYSIS_ID" ] || [ "$ANALYSIS_ID" == "null" ]; then
          echo "No analysis ID found in completed task."
          exit 1
        fi
        
        echo "Using analysis ID: $ANALYSIS_ID"
        
        QG_RESULT=$(curl -s -u "$(SONAR_LOGIN_TOKEN):" "$(SONAR_HOST_URL)/api/qualitygates/project_status?analysisId=$ANALYSIS_ID")
        echo "Quality Gate Result: $QG_RESULT"
        
        if ! echo "$QG_RESULT" | jq . > /dev/null 2>&1; then
          echo "Error: Invalid JSON response from quality gate API."
          exit 1
        fi
        
        QG_STATUS=$(echo "$QG_RESULT" | jq -r '.projectStatus.status')
        echo "Quality Gate Status: $QG_STATUS"
        
        if [ "$QG_STATUS" != "OK" ] && [ "$QG_STATUS" != "PASSED" ]; then
          echo "##[error]SonarQube Quality Gate failed with status: $QG_STATUS"
          exit 1
        fi
        
        echo "Quality Gate passed successfully!"
      displayName: 'Check Quality Gate Status'

- stage: BuildAndPushImage
  displayName: 'Build and Push Docker Image'
  dependsOn: SonarQualityGate
  jobs:
    - job: BuildDockerImage
      displayName: 'Build , Scan & Push Docker Image'
      steps:
        - script: |
            echo "Logging in to Docker Hub..."
            echo $(DOCKER_PASSWORD) | docker login -u $(DOCKER_USERNAME) --password-stdin
          displayName: 'Logging into Container Registries'

        - script: |  
            echo "Building image: $(DOCKER_USERNAME)/$(IMAGE_NAME):$(IMAGE_TAG)"
            docker build . -t "$(DOCKER_USERNAME)/$(IMAGE_NAME):$(IMAGE_TAG)"
          displayName: 'Building Docker Image'

        - script: | 
           curl -fsSL https://raw.githubusercontent.com/docker/scout-cli/main/install.sh -o install-scout.sh
            sh install-scout.sh
            docker scout cves \
              --format only-packages \
              --only-vuln-packages \
              --output $(Build.ArtifactStagingDirectory)/docker_scout_report.json \
              "$(DOCKER_USERNAME)/$(IMAGE_NAME):$(IMAGE_TAG)"
          displayName: 'Installing Docker Scout & Scanning Image'
            
        - script: |
            docker push "$(DOCKER_USERNAME)/$(IMAGE_NAME):$(IMAGE_TAG)"
          displayName: 'Pushing the image to Docker Hub'

        - publish: $(Build.ArtifactStagingDirectory)/docker_scout_report.json
          artifact: docker_scout_report    
          displayName: 'Publish Docker Scout Report'
        
        - script: |
            docker save -o $(Build.ArtifactStagingDirectory)/sanchit.tar "$(DOCKER_USERNAME)/$(IMAGE_NAME):$(IMAGE_TAG)"
          displayName: 'Saving Docker Image as sanchit.tar'

        - publish: $(Build.ArtifactStagingDirectory)/sanchit.tar
          artifact: docker_image_tar
          displayName: 'Publish Docker Image Tar File'
        
- stage: CopyToVM
  displayName: 'Copy to VM'
  jobs:
    - job: CopyToVM
      displayName: 'Copying Image Tar file to VM.'
      steps:
      - download: current
        artifact: docker_image_tar
        displayName: 'Download Docker Image Tar'
      - script: |
         docker load -i $(Pipeline.Workspace)/docker_image_tar/sanchit.tar
         sudo apt -y install sshpass
         mkdir -p ~/.ssh
         ssh-keyscan $(VM_IP) >> ~/.ssh/known_hosts
         sshpass -p $(VM_PASSWORD) scp $(Pipeline.Workspace)/docker_image_tar/sanchit.tar $(VM_USERNAME)@$(VM_IP):/home/ranjeet/
        displayName: 'Copy Docker Image Tar to Azure VM using Username & Password'